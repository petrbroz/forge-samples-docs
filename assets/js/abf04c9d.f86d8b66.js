"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[705],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=i,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return t?a.createElement(g,s(s({ref:n},u),{},{components:t})):a.createElement(g,s({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8843:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(7294),i=t(3117),r=t(2389),s=t(742),o=t(6010),l="tabItem_LplD";function c(e){var n,t,r,c=e.lazy,u=e.block,p=e.defaultValue,d=e.values,m=e.groupId,g=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=d?d:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,s.lx)(k,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===p?p:null!=(n=null!=p?p:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=h[0])?void 0:r.props.value;if(null!==v&&!k.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=(0,s.UB)(),w=f.tabGroupChoices,y=f.setTabGroupChoices,T=(0,a.useState)(v),C=T[0],N=T[1],j=[],E=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var A=w[m];null!=A&&A!==C&&k.some((function(e){return e.value===A}))&&N(A)}var O=function(e){var n=e.currentTarget,t=j.indexOf(n),a=k[t].value;a!==C&&(E(n),N(a),null!=m&&y(m,a))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=j.indexOf(e.currentTarget)+1;t=j[a]||j[0];break;case"ArrowLeft":var i=j.indexOf(e.currentTarget)-1;t=j[i]||j[j.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":u},g)},k.map((function(e){var n=e.value,t=e.label,r=e.attributes;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:function(e){return j.push(e)},onKeyDown:S,onFocus:O,onClick:O},r,{className:(0,o.Z)("tabs__item",l,null==r?void 0:r.className,{"tabs__item--active":C===n})}),null!=t?t:n)}))),c?(0,a.cloneElement)(h.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==C})}))))}function u(e){var n=(0,r.Z)();return a.createElement(c,(0,i.Z)({key:String(n)},e))}function p(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:i},n)}function d(e){var n=e.NodeJsVsCode,t=e.DotNetVsCode,i=e.DotNetVs2022;return a.createElement(u,{groupId:"development-environment"},a.createElement(p,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},a.createElement(n,null)),a.createElement(p,{value:"dotnet-vscode",label:".NET 6 & VSCode"},a.createElement(t,null)),a.createElement(p,{value:"dotnet-vs2022",label:".NET 6 & VS2022"},a.createElement(i,null)))}},5461:function(e,n,t){t.r(n),t.d(n,{assets:function(){return S},contentTitle:function(){return A},default:function(){return x},frontMatter:function(){return E},metadata:function(){return O},toc:function(){return _}});var a=t(3117),i=t(102),r=(t(7294),t(3905)),s=t(8843),o=["components"],l={toc:[]};function c(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Update the ",(0,r.kt)("inlineCode",{parentName:"p"},"services/forge.js")," file with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/forge.js"',title:'"services/forge.js"'},"// highlight-start\nconst { AuthClientTwoLegged, BucketsApi } = require('forge-apis');\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = require('../config.js');\n// highlight-end\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'], true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, ['viewables:read'], true);\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\n// highlight-start\nasync function ensureBucketExists(bucketKey) {\n    try {\n        await new BucketsApi().getBucketDetails(bucketKey, null, await getInternalToken());\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey, policyKey: 'temporary' }, {}, null, await getInternalToken());\n        } else {\n            throw err;\n        }\n    }\n}\n// highlight-end\n\nmodule.exports = {\n    getPublicToken,\n};\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ensureBucketExists")," function will simply try and request additional information\nabout a specific bucket using the ",(0,r.kt)("inlineCode",{parentName:"p"},"BucketsApi")," class from the Forge SDK, and if the response\nfrom Forge is ",(0,r.kt)("inlineCode",{parentName:"p"},"404 Not Found"),", it will attempt to create a new bucket with this name."),(0,r.kt)("p",null,"Now, let's add two more functions in ",(0,r.kt)("inlineCode",{parentName:"p"},"services/forge.js")," that will be used to list\nall objects in the preconfigured bucket, and to upload files to this bucket:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/forge.js"',title:'"services/forge.js"'},"// highlight-start\nconst fs = require('fs');\nconst { AuthClientTwoLegged, BucketsApi, ObjectsApi, DerivativesApi } = require('forge-apis');\n// highlight-end\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = require('../config.js');\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'], true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, ['viewables:read'], true);\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\nasync function ensureBucketExists(bucketKey) {\n    try {\n        await new BucketsApi().getBucketDetails(bucketKey, null, await getInternalToken());\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey, policyKey: 'temporary' }, {}, null, await getInternalToken());\n        } else {\n            throw err;\n        }\n    }\n}\n\n// highlight-start\nasync function listObjects() {\n    await ensureBucketExists(FORGE_BUCKET);\n    let resp = await new ObjectsApi().getObjects(FORGE_BUCKET, { limit: 64 }, null, await getInternalToken());\n    let objects = resp.body.items;\n    while (resp.body.next) {\n        const startAt = new URL(resp.body.next).searchParams.get('startAt');\n        resp = await new ObjectsApi().getObjects(FORGE_BUCKET, { limit: 64, startAt }, null, await getInternalToken());\n        objects = objects.concat(resp.body.items);\n    }\n    return objects;\n}\n\nasync function uploadObject(objectName, filePath) {\n    await ensureBucketExists(FORGE_BUCKET);\n    const buffer = fs.readFileSync(filePath);\n    const resp = await new ObjectsApi().uploadObject(FORGE_BUCKET, objectName, buffer.byteLength, buffer, {}, null, await getInternalToken());\n    return resp.body;\n}\n// highlight-end\n\nmodule.exports = {\n    getPublicToken,\n    // highlight-start\n    listObjects,\n    uploadObject,\n    // highlight-end\n};\n")),(0,r.kt)("p",null,"As you can see, the ",(0,r.kt)("inlineCode",{parentName:"p"},"getObjects")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ObjectsApi")," class (responsible for listing files in a Data Management bucket)\nuses pagination. In our code we simply iterate through all the pages and return all files from our application's bucket\nin a single list."))}c.isMDXComponent=!0;var u=["components"],p={toc:[]};function d(e){var n=e.components,t=(0,i.Z)(e,u);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Add the following code to ",(0,r.kt)("inlineCode",{parentName:"p"},"services/forge.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/forge.js"',title:'"services/forge.js"'},"const fs = require('fs');\n// highlight-start\nconst { AuthClientTwoLegged, BucketsApi, ObjectsApi, DerivativesApi } = require('forge-apis');\n// highlight-end\nconst { FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, FORGE_BUCKET } = require('../config.js');\n\nlet internalAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, ['bucket:read', 'bucket:create', 'data:read', 'data:write', 'data:create'], true);\nlet publicAuthClient = new AuthClientTwoLegged(FORGE_CLIENT_ID, FORGE_CLIENT_SECRET, ['viewables:read'], true);\n\nasync function getInternalToken() {\n    if (!internalAuthClient.isAuthorized()) {\n        await internalAuthClient.authenticate();\n    }\n    return internalAuthClient.getCredentials();\n}\n\nasync function getPublicToken() {\n    if (!publicAuthClient.isAuthorized()) {\n        await publicAuthClient.authenticate();\n    }\n    return publicAuthClient.getCredentials();\n}\n\nasync function ensureBucketExists(bucketKey) {\n    try {\n        await new BucketsApi().getBucketDetails(bucketKey, null, await getInternalToken());\n    } catch (err) {\n        if (err.statusCode === 404) {\n            await new BucketsApi().createBucket({ bucketKey, policyKey: 'temporary' }, {}, null, await getInternalToken());\n        } else {\n            throw err;\n        }\n    }\n}\n\nasync function listObjects() {\n    await ensureBucketExists(FORGE_BUCKET);\n    let resp = await new ObjectsApi().getObjects(FORGE_BUCKET, { limit: 64 }, null, await getInternalToken());\n    let objects = resp.body.items;\n    while (resp.body.next) {\n        const startAt = new URL(resp.body.next).searchParams.get('startAt');\n        resp = await new ObjectsApi().getObjects(FORGE_BUCKET, { limit: 64, startAt }, null, await getInternalToken());\n        objects = objects.concat(resp.body.items);\n    }\n    return objects;\n}\n\nasync function uploadObject(objectName, filePath) {\n    await ensureBucketExists(FORGE_BUCKET);\n    const buffer = fs.readFileSync(filePath);\n    const resp = await new ObjectsApi().uploadObject(FORGE_BUCKET, objectName, buffer.byteLength, buffer, {}, null, await getInternalToken());\n    return resp.body;\n}\n\n// highlight-start\nasync function translateObject(urn, rootFilename) {\n    const job = {\n        input: { urn },\n        output: { formats: [{ type: 'svf', views: ['2d', '3d'] }] }\n    };\n    if (rootFilename) {\n        job.input.compressedUrn = true;\n        job.input.rootFilename = rootFilename;\n    }\n    const resp = await new DerivativesApi().translate(job, {}, null, await getInternalToken());\n    return resp.body;\n}\n\nasync function getManifest(urn) {\n    try {\n        const resp = await new DerivativesApi().getManifest(urn, {}, null, await getInternalToken());\n        return resp.body;\n    } catch (err) {\n        if (err.statusCode === 404) {\n            return null;\n        } else {\n            throw err;\n        }\n    }\n}\n\nfunction urnify(id) {\n    return Buffer.from(id).toString('base64').replace(/=/g, '');\n}\n// highlight-end\n\nmodule.exports = {\n    getPublicToken,\n    listObjects,\n    uploadObject,\n    // highlight-start\n    translateObject,\n    getManifest,\n    urnify\n    // highlight-end\n};\n")))}d.isMDXComponent=!0;var m=["components"],g={toc:[]};function h(e){var n=e.components,t=(0,i.Z)(e,m);return(0,r.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"models.js")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"routes")," subfolder with the following\ncontent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/models.js"',title:'"routes/models.js"'},"const express = require('express');\nconst formidable = require('express-formidable');\nconst { listObjects, uploadObject, translateObject, getManifest, urnify } = require('../services/forge.js');\n\nlet router = express.Router();\n\nrouter.get('/', async function (req, res, next) {\n    try {\n        const objects = await listObjects();\n        res.json(objects.map(o => ({\n            name: o.objectKey,\n            urn: urnify(o.objectId)\n        })));\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.get('/:urn/status', async function (req, res, next) {\n    try {\n        const manifest = await getManifest(req.params.urn);\n        if (manifest) {\n            let messages = [];\n            if (manifest.derivatives) {\n                for (const derivative of manifest.derivatives) {\n                    messages = messages.concat(derivative.messages || []);\n                    if (derivative.children) {\n                        for (const child of derivative.children) {\n                            messages.concat(child.messages || []);\n                        }\n                    }\n                }\n            }\n            res.json({ status: manifest.status, progress: manifest.progress, messages });\n        } else {\n            res.json({ status: 'n/a' });\n        }\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.post('/', formidable(), async function (req, res, next) {\n    const file = req.files['model-file'];\n    if (!file) {\n        res.status(400).send('The required field (\"model-file\") is missing.');\n        return;\n    }\n    try {\n        const obj = await uploadObject(file.name, file.path);\n        await translateObject(urnify(obj.objectId), req.fields['model-zip-entrypoint']);\n        res.json({\n            name: obj.objectKey,\n            urn: urnify(obj.objectId)\n        });\n    } catch (err) {\n        next(err);\n    }\n});\n\nmodule.exports = router;\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"formidable()")," middleware used in the ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request handler will make sure that\nany ",(0,r.kt)("inlineCode",{parentName:"p"},"multipart/form-data")," content coming with the request is parsed and available\nin the ",(0,r.kt)("inlineCode",{parentName:"p"},"req.files")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"req.fields")," properties."))),(0,r.kt)("p",null,"And mount the router to our server application by modifying ",(0,r.kt)("inlineCode",{parentName:"p"},"server.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst { PORT } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\napp.use('/api/auth', require('./routes/auth.js'));\n// highlight-start\napp.use('/api/models', require('./routes/models.js'));\n// highlight-end\napp.listen(PORT, function () { console.log(`Server listening on port ${PORT}...`); });\n")),(0,r.kt)("p",null,"The router will handle 3 types of requests:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /api/models")," - when the client wants to get the list of all models available for viewing"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /api/models/:urn/status")," - used to check the status of the conversion (incl. error messages if there are any)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"POST /api/models")," - when the client wants to upload a new model and start its translation")))}h.isMDXComponent=!0;var k=["components"],b={toc:[]};function v(e){var n=e.components,t=(0,i.Z)(e,k);return(0,r.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Update the ",(0,r.kt)("inlineCode",{parentName:"p"},"Models/ForgeService.cs")," file with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.cs"',title:'"Models/ForgeService.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic record Token(string AccessToken, DateTime ExpiresAt);\n\npublic class ForgeService\n{\n    private readonly string _clientId;\n    private readonly string _clientSecret;\n    // highlight-start\n    private readonly string _bucket;\n    // highlight-end\n    private Token _internalTokenCache;\n    private Token _publicTokenCache;\n\n    public ForgeService(string clientId, string clientSecret, string bucket = null)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n        // highlight-start\n        _bucket = string.IsNullOrEmpty(bucket) ? string.Format("{0}-basic-app", _clientId.ToLower()) : bucket;\n        // highlight-end\n    }\n\n    private async Task<Token> GetToken(Scope[] scopes)\n    {\n        dynamic auth = await new TwoLeggedApi().AuthenticateAsync(_clientId, _clientSecret, "client_credentials", scopes);\n        return new Token(auth.access_token, DateTime.UtcNow.AddSeconds(auth.expires_in));\n    }\n\n    public async Task<Token> GetPublicToken()\n    {\n        if (_publicTokenCache == null || _publicTokenCache.ExpiresAt < DateTime.UtcNow)\n            _publicTokenCache = await GetToken(new Scope[] { Scope.ViewablesRead });\n        return _publicTokenCache;\n    }\n\n    private async Task<Token> GetInternalToken()\n    {\n        if (_internalTokenCache == null || _internalTokenCache.ExpiresAt < DateTime.UtcNow)\n            _internalTokenCache = await GetToken(new Scope[] { Scope.BucketCreate, Scope.BucketRead, Scope.DataRead, Scope.DataWrite, Scope.DataCreate });\n        return _internalTokenCache;\n    }\n\n    // highlight-start\n    private async Task EnsureBucketExists(string bucketKey)\n    {\n        var token = await GetInternalToken();\n        var api = new BucketsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        try\n        {\n            await api.GetBucketDetailsAsync(bucketKey);\n        }\n        catch (ApiException e)\n        {\n            if (e.ErrorCode == 404)\n            {\n                await api.CreateBucketAsync(new PostBucketsPayload(bucketKey, null, PostBucketsPayload.PolicyKeyEnum.Temporary));\n            }\n            else\n            {\n                throw e;\n            }\n        }\n    }\n    // highlight-end\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"EnsureBucketExists")," method will simply try and request additional information\nabout a specific bucket, and if the response from Forge is ",(0,r.kt)("inlineCode",{parentName:"p"},"404 Not Found"),", it will\nattempt to create a new bucket with that name. If no bucket name is provided through\nenvironment variables, we generate one by appending the ",(0,r.kt)("inlineCode",{parentName:"p"},"-basic-app")," suffix to the Forge Client ID."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Note that the Data Management service requires bucket names to be ",(0,r.kt)("strong",{parentName:"p"},"globally unique"),",\nand attempts to create a bucket with an already used name will fail with ",(0,r.kt)("inlineCode",{parentName:"p"},"409 Conflict"),".\nSee the ",(0,r.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/data/v2/reference/http/buckets-POST"},"documentation"),"\nfor more details."))),(0,r.kt)("p",null,"Now we will update the ",(0,r.kt)("inlineCode",{parentName:"p"},"ForgeService")," class with a helper method that will list all objects\nin the preconfigured bucket, and a helper method for uploading additional files to this bucket:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.cs"',title:'"Models/ForgeService.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic record Token(string AccessToken, DateTime ExpiresAt);\n\npublic class ForgeService\n{\n    private readonly string _clientId;\n    private readonly string _clientSecret;\n    private readonly string _bucket;\n    private Token _internalTokenCache;\n    private Token _publicTokenCache;\n\n    public ForgeService(string clientId, string clientSecret, string bucket = null)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n        _bucket = string.IsNullOrEmpty(bucket) ? string.Format("{0}-basic-app", _clientId.ToLower()) : bucket;\n    }\n\n    private async Task<Token> GetToken(Scope[] scopes)\n    {\n        dynamic auth = await new TwoLeggedApi().AuthenticateAsync(_clientId, _clientSecret, "client_credentials", scopes);\n        return new Token(auth.access_token, DateTime.UtcNow.AddSeconds(auth.expires_in));\n    }\n\n    public async Task<Token> GetPublicToken()\n    {\n        if (_publicTokenCache == null || _publicTokenCache.ExpiresAt < DateTime.UtcNow)\n            _publicTokenCache = await GetToken(new Scope[] { Scope.ViewablesRead });\n        return _publicTokenCache;\n    }\n\n    private async Task<Token> GetInternalToken()\n    {\n        if (_internalTokenCache == null || _internalTokenCache.ExpiresAt < DateTime.UtcNow)\n            _internalTokenCache = await GetToken(new Scope[] { Scope.BucketCreate, Scope.BucketRead, Scope.DataRead, Scope.DataWrite, Scope.DataCreate });\n        return _internalTokenCache;\n    }\n\n    private async Task EnsureBucketExists(string bucketKey)\n    {\n        var token = await GetInternalToken();\n        var api = new BucketsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        try\n        {\n            await api.GetBucketDetailsAsync(bucketKey);\n        }\n        catch (ApiException e)\n        {\n            if (e.ErrorCode == 404)\n            {\n                await api.CreateBucketAsync(new PostBucketsPayload(bucketKey, null, PostBucketsPayload.PolicyKeyEnum.Temporary));\n            }\n            else\n            {\n                throw e;\n            }\n        }\n    }\n\n    // highlight-start\n    public async Task<ObjectDetails> UploadModel(string objectName, Stream content, long contentLength)\n    {\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var obj = (await api.UploadObjectAsync(_bucket, objectName, (int)contentLength, content)).ToObject<ObjectDetails>();\n        return obj;\n    }\n\n    public async Task<IEnumerable<ObjectDetails>> GetObjects()\n    {\n        const int PageSize = 64;\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var results = new List<ObjectDetails>();\n        var response = (await api.GetObjectsAsync(_bucket, PageSize)).ToObject<BucketObjects>();\n        results.AddRange(response.Items);\n        while (!string.IsNullOrEmpty(response.Next))\n        {\n            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(response.Next).Query);\n            response = (await api.GetObjectsAsync(_bucket, PageSize, null, queryParams["startAt"])).ToObject<BucketObjects>();\n            results.AddRange(response.Items);\n        }\n        return results;\n    }\n    // highlight-end\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GetObjects")," method pages through all objects in the bucket, and returns their name and URN\n(the base64-encoded ID that will later be used when communicating with the Model Derivative service)."))}v.isMDXComponent=!0;var f=["components"],w={toc:[]};function y(e){var n=e.components,t=(0,i.Z)(e,f);return(0,r.kt)("wrapper",(0,a.Z)({},w,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Add the following code to ",(0,r.kt)("inlineCode",{parentName:"p"},"Models/ForgeService.cs"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/ForgeService.cs"',title:'"Models/ForgeService.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic record Token(string AccessToken, DateTime ExpiresAt);\n\n// highlight-start\npublic record TranslationStatus(string Status, string Progress, IEnumerable<string>? Messages);\n// highlight-end\n\npublic class ForgeService\n{\n    private readonly string _clientId;\n    private readonly string _clientSecret;\n    private readonly string _bucket;\n    private Token _internalTokenCache;\n    private Token _publicTokenCache;\n\n    public ForgeService(string clientId, string clientSecret, string bucket = null)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n        _bucket = string.IsNullOrEmpty(bucket) ? string.Format("{0}-basic-app", _clientId.ToLower()) : bucket;\n    }\n\n    private async Task<Token> GetToken(Scope[] scopes)\n    {\n        dynamic auth = await new TwoLeggedApi().AuthenticateAsync(_clientId, _clientSecret, "client_credentials", scopes);\n        return new Token(auth.access_token, DateTime.UtcNow.AddSeconds(auth.expires_in));\n    }\n\n    public async Task<Token> GetPublicToken()\n    {\n        if (_publicTokenCache == null || _publicTokenCache.ExpiresAt < DateTime.UtcNow)\n            _publicTokenCache = await GetToken(new Scope[] { Scope.ViewablesRead });\n        return _publicTokenCache;\n    }\n\n    private async Task<Token> GetInternalToken()\n    {\n        if (_internalTokenCache == null || _internalTokenCache.ExpiresAt < DateTime.UtcNow)\n            _internalTokenCache = await GetToken(new Scope[] { Scope.BucketCreate, Scope.BucketRead, Scope.DataRead, Scope.DataWrite, Scope.DataCreate });\n        return _internalTokenCache;\n    }\n\n    private async Task EnsureBucketExists(string bucketKey)\n    {\n        var token = await GetInternalToken();\n        var api = new BucketsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        try\n        {\n            await api.GetBucketDetailsAsync(bucketKey);\n        }\n        catch (ApiException e)\n        {\n            if (e.ErrorCode == 404)\n            {\n                await api.CreateBucketAsync(new PostBucketsPayload(bucketKey, null, PostBucketsPayload.PolicyKeyEnum.Temporary));\n            }\n            else\n            {\n                throw e;\n            }\n        }\n    }\n\n    public async Task<ObjectDetails> UploadModel(string objectName, Stream content, long contentLength)\n    {\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var obj = (await api.UploadObjectAsync(_bucket, objectName, (int)contentLength, content)).ToObject<ObjectDetails>();\n        return obj;\n    }\n\n    public async Task<IEnumerable<ObjectDetails>> GetObjects()\n    {\n        const int PageSize = 64;\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var results = new List<ObjectDetails>();\n        var response = (await api.GetObjectsAsync(_bucket, PageSize)).ToObject<BucketObjects>();\n        results.AddRange(response.Items);\n        while (!string.IsNullOrEmpty(response.Next))\n        {\n            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(response.Next).Query);\n            response = (await api.GetObjectsAsync(_bucket, PageSize, null, queryParams["startAt"])).ToObject<BucketObjects>();\n            results.AddRange(response.Items);\n        }\n        return results;\n    }\n\n    // highlight-start\n    public static string Base64Encode(string plainText)\n    {\n        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);\n        return System.Convert.ToBase64String(plainTextBytes).TrimEnd(\'=\');\n    }\n\n    public async Task<Job> TranslateModel(string objectId, string rootFilename)\n    {\n        var token = await GetInternalToken();\n        var api = new DerivativesApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var formats = new List<JobPayloadItem> {\n            new JobPayloadItem (JobPayloadItem.TypeEnum.Svf, new List<JobPayloadItem.ViewsEnum> { JobPayloadItem.ViewsEnum._2d, JobPayloadItem.ViewsEnum._2d })\n        };\n        var payload = new JobPayload(\n            new JobPayloadInput(Base64Encode(objectId)),\n            new JobPayloadOutput(formats)\n        );\n        if (!string.IsNullOrEmpty(rootFilename))\n        {\n            payload.Input.RootFilename = rootFilename;\n            payload.Input.CompressedUrn = true;\n        }\n        var job = (await api.TranslateAsync(payload)).ToObject<Job>();\n        return job;\n    }\n\n    public async Task<TranslationStatus> GetTranslationStatus(string urn)\n    {\n        var token = await GetInternalToken();\n        var api = new DerivativesApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var json = (await api.GetManifestAsync(urn)).ToJson();\n        var messages = new List<string>();\n        foreach (var message in json.SelectTokens("$.derivatives[*].messages[?(@.type == \'error\')].message"))\n        {\n            if (message.Type == Newtonsoft.Json.Linq.JTokenType.String)\n                messages.Add((string)message);\n        }\n        foreach (var message in json.SelectTokens("$.derivatives[*].children[*].messages[?(@.type == \'error\')].message"))\n        {\n            if (message.Type == Newtonsoft.Json.Linq.JTokenType.String)\n                messages.Add((string)message);\n        }\n        return new TranslationStatus((string)json["status"], (string)json["progress"], messages);\n    }\n    // highlight-end\n}\n')))}y.isMDXComponent=!0;var T=["components"],C={toc:[]};function N(e){var n=e.components,t=(0,i.Z)(e,T);return(0,r.kt)("wrapper",(0,a.Z)({},C,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelsController.cs")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"Controllers")," subfolder with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Controllers/ModelsController.cs"',title:'"Controllers/ModelsController.cs"'},'using System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class ModelsController : ControllerBase\n{\n    public record BucketObject(string name, string urn);\n\n    private readonly ForgeService _forgeService;\n\n    public ModelsController(ForgeService forgeService)\n    {\n        _forgeService = forgeService;\n    }\n\n    [HttpGet()]\n    public async Task<IEnumerable<BucketObject>> GetModels()\n    {\n        var objects = await _forgeService.GetObjects();\n        return from o in objects\n               select new BucketObject(o.ObjectKey, ForgeService.Base64Encode(o.ObjectId));\n    }\n\n    [HttpGet("{urn}/status")]\n    public async Task<TranslationStatus> GetModelStatus(string urn)\n    {\n        try\n        {\n            var status = await _forgeService.GetTranslationStatus(urn);\n            return status;\n        }\n        catch (Autodesk.Forge.Client.ApiException ex)\n        {\n            if (ex.ErrorCode == 404)\n                return new TranslationStatus("n/a", "", new List<string>());\n            else\n                throw ex;\n        }\n    }\n\n    public class UploadModelForm\n    {\n        [FromForm(Name = "model-zip-entrypoint")]\n        public string? Entrypoint { get; set; }\n\n        [FromForm(Name = "model-file")]\n        public IFormFile File { get; set; }\n    }\n\n    [HttpPost()]\n    public async Task<BucketObject> UploadAndTranslateModel([FromForm] UploadModelForm form)\n    {\n        using (var stream = new MemoryStream())\n        {\n            await form.File.CopyToAsync(stream);\n            stream.Position = 0;\n            var obj = await _forgeService.UploadModel(form.File.FileName, stream, form.File.Length);\n            var job = await _forgeService.TranslateModel(obj.ObjectId, form.Entrypoint);\n            return new BucketObject(obj.ObjectKey, job.Urn);\n        }\n    }\n}\n')),(0,r.kt)("p",null,"The controller will handle 3 types of requests:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /api/models")," - when the client wants to get the list of all models available for viewing"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET /api/models/:urn/status")," - used to check the status of the conversion (incl. error messages if there are any)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"POST /api/models")," - when the client wants to upload a new model and start its translation")))}N.isMDXComponent=!0;var j=["components"],E={},A="Data & Derivatives",O={unversionedId:"tutorials/simple-viewer/data",id:"tutorials/simple-viewer/data",title:"Data & Derivatives",description:"In this step we will extend our server so that we can list models, upload them,",source:"@site/docs/tutorials/01-simple-viewer/03-data.mdx",sourceDirName:"tutorials/01-simple-viewer",slug:"/tutorials/simple-viewer/data",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/data",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/01-simple-viewer/03-data.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/auth"},next:{title:"Viewer & UI",permalink:"/forge-samples-docs/docs/tutorials/simple-viewer/viewer"}},S={},_=[{value:"Data management",id:"data-management",level:2},{value:"Derivatives",id:"derivatives",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],I={toc:_};function x(e){var n=e.components,o=(0,i.Z)(e,j);return(0,r.kt)("wrapper",(0,a.Z)({},I,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data--derivatives"},"Data & Derivatives"),(0,r.kt)("p",null,"In this step we will extend our server so that we can list models, upload them,\nand prepare them for viewing."),(0,r.kt)("h2",{id:"data-management"},"Data management"),(0,r.kt)("p",null,"First, let's make sure that our application has a bucket in the Data Management service\nto store its files in. Typically the bucket would be created just once as part of a provisioning\nstep but in our sample we will implement a helper function that will make sure that the bucket\nis available, and use it in other parts of the server app."),(0,r.kt)(s.Z,{NodeJsVsCode:c,DotNetVsCode:v,DotNetVs2022:v,mdxType:"EnvTabs"}),(0,r.kt)("h2",{id:"derivatives"},"Derivatives"),(0,r.kt)("p",null,"Next, we will implement a couple of helper functions that will derive/extract various types of information\nfrom the uploaded files - for example, 2D drawings, 3D geometry, and metadata - that we can later load\ninto Forge Viewer in our webpage. To do so, we will need to start a new conversion job\nin the ",(0,r.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/model-derivative/v2/developers_guide/overview"},"Model Derivative"),"\nservice, and checking the status of the conversion."),(0,r.kt)("p",null,"Model Derivative service requires all IDs we use in the API calls to be ",(0,r.kt)("a",{parentName:"p",href:"https://wikipedia.org/wiki/Base64"},"base64"),"-encoded,\nso we include a small utility function that will help with that."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Base64-encoded IDs are referred to as ",(0,r.kt)("em",{parentName:"p"},"URNs"),"."))),(0,r.kt)(s.Z,{NodeJsVsCode:d,DotNetVsCode:y,DotNetVs2022:y,mdxType:"EnvTabs"}),(0,r.kt)("h2",{id:"server-endpoints"},"Server endpoints"),(0,r.kt)("p",null,"Now let's make the new functionality available to the client through another\nset of endpoints."),(0,r.kt)(s.Z,{NodeJsVsCode:h,DotNetVsCode:N,DotNetVs2022:N,mdxType:"EnvTabs"}),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"Start (or restart) the app as usual, and navigate to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080/api/models"},"http://localhost:8080/api/models"),"\nin the browser. The server should respond with a JSON list with names and URNs of all objects\navailable in your configured bucket."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If this is your first time working with Forge, you may get a JSON response\nwith an empty array (",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),") which is expected. In the screenshot below we can\nalready see a couple of files that were uploaded to our bucket in the past."))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you are using Google Chrome, consider installing ",(0,r.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"},"JSON Formatter"),"\nor a similar extension to automatically format JSON responses."))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Server Response",src:t(114).Z,width:"1500",height:"929"})))}x.isMDXComponent=!0},114:function(e,n,t){n.Z=t.p+"assets/images/data-response-136a1ffb319991f74fc05f2b47c7fb39.webp"}}]);