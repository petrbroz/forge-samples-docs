"use strict";(self.webpackChunkforge_samples_docs=self.webpackChunkforge_samples_docs||[]).push([[382],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),h=d(t),u=i,m=h["".concat(l,".").concat(u)]||h[u]||p[u]||s;return t?o.createElement(m,a(a({ref:n},c),{},{components:t})):o.createElement(m,a({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,a=new Array(s);a[0]=h;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,a[1]=r;for(var d=2;d<s;d++)a[d]=t[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5669:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return p}});var o=t(3117),i=t(102),s=(t(7294),t(3905)),a=["components"],r={},l="Basic Extension",d={unversionedId:"tutorials/dashboard/basic",id:"tutorials/dashboard/basic",title:"Basic Extension",description:"Forge Viewer provides its own set of APIs",source:"@site/docs/tutorials/03-dashboard/01-basic.mdx",sourceDirName:"tutorials/03-dashboard",slug:"/tutorials/dashboard/basic",permalink:"/forge-samples-docs/docs/tutorials/dashboard/basic",editUrl:"https://github.com/petrbroz/forge-samples-docs/edit/master/docs/tutorials/03-dashboard/01-basic.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dashboard",permalink:"/forge-samples-docs/docs/tutorials/dashboard/"},next:{title:"Model Summary",permalink:"/forge-samples-docs/docs/tutorials/dashboard/panel"}},c={},p=[{value:"Extension skeleton",id:"extension-skeleton",level:2},{value:"Event handling",id:"event-handling",level:2},{value:"Metadata queries",id:"metadata-queries",level:2},{value:"Simple extension",id:"simple-extension",level:2},{value:"Try it out",id:"try-it-out",level:2}],h={toc:p};function u(e){var n=e.components,r=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},h,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"basic-extension"},"Basic Extension"),(0,s.kt)("p",null,"Forge Viewer provides its own set of ",(0,s.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/viewer/v7/reference/Viewing/Viewer3D"},"APIs"),"\nthat you can use to customize its look and feel, behavior, and even the rendered content. While you ",(0,s.kt)("em",{parentName:"p"},"could"),"\nsimply sprinkle your custom viewer logic in random places of the client-side code, it is a good practice\nto encapsulate any viewer functionality into a ",(0,s.kt)("em",{parentName:"p"},"viewer extension"),". That way you can easily share the same\nfunctionality across different pages of your web application, and even across different projects entirely."),(0,s.kt)("p",null,"Let's start by implementing a simple viewer extension that will react to various viewer events, and output\ndifferent types of information about the currently loaded design."),(0,s.kt)("h2",{id:"extension-skeleton"},"Extension skeleton"),(0,s.kt)("p",null,"Later in this tutorial we will implement other extensions that may share similar functionality, so we will\nfirst implement a base class that all the extensions will be derived from."),(0,s.kt)("p",null,"Go to the folder that contains your client side assets such as the ",(0,s.kt)("inlineCode",{parentName:"p"},"index.html")," page (in our case it's\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"wwwroot")," folder), and create a new subfolder called ",(0,s.kt)("inlineCode",{parentName:"p"},"extensions"),". This is where we will store all\nour viewer extensions. Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseExtension.js")," file in the ",(0,s.kt)("inlineCode",{parentName:"p"},"extensions")," folder, and populate it with\nthe following content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/BaseExtension.js"',title:'"wwwroot/extensions/BaseExtension.js"'},"export class BaseExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n\n    load() {\n        return true;\n    }\n\n    unload() {\n        return true;\n    }\n}\n")),(0,s.kt)("p",null,"As you can see, a viewer extension is basically a subclass of ",(0,s.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/viewer/v7/reference/Viewing/Extension"},"Autodesk.Viewing.Extension"),"\nthat overrides some of its lifecycle methods. For now we have overridden the following methods:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"load")," - called when the extension is loaded by the viewer, returning a boolean flag indicating whether the loading was successful"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"unload")," - called when the extension is unloaded by the viewer, returning a boolean flag indicating whether the unloading was successful")),(0,s.kt)("p",null,'In its constructor the extension always receives the instance of the viewer that "owns" this extension,\nand optionally another object with extension-specific inputs.'),(0,s.kt)("h2",{id:"event-handling"},"Event handling"),(0,s.kt)("p",null,'Now, let\'s update our extension so that it reacts to different kinds of events in the viewer, for example,\nwhen a new model is loaded, when the user selects one or more elements, or when one or more elements are\n"isolated". Update the ',(0,s.kt)("inlineCode",{parentName:"p"},"BaseExtension")," class with the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/BaseExtension.js"',title:'"wwwroot/extensions/BaseExtension.js"'},"export class BaseExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        // highlight-start\n        this._onObjectTreeCreated = (ev) => this.onModelLoaded(ev.model);\n        this._onSelectionChanged = (ev) => this.onSelectionChanged(ev.model, ev.dbIdArray);\n        this._onIsolationChanged = (ev) => this.onIsolationChanged(ev.model, ev.nodeIdArray);\n        // highlight-end\n    }\n\n    load() {\n        // highlight-start\n        this.viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.addEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        // highlight-end\n        return true;\n    }\n\n    unload() {\n        // highlight-start\n        this.viewer.removeEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.removeEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        // highlight-end\n        return true;\n    }\n\n    // highlight-start\n    onModelLoaded(model) {}\n\n    onSelectionChanged(model, dbids) {}\n\n    onIsolationChanged(model, dbids) {}\n    // highlight-end\n}\n")),(0,s.kt)("p",null,"As you can see, the viewer provides ",(0,s.kt)("inlineCode",{parentName:"p"},"addEventListener")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"removeEventListener")," methods that we can use\nto handle different viewer events. In this case we're handling the ",(0,s.kt)("inlineCode",{parentName:"p"},"OBJECT_TREE_CREATED_EVENT"),",\n",(0,s.kt)("inlineCode",{parentName:"p"},"SELECTION_CHANGED_EVENT"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"ISOLATE_EVENT")," events by calling the ",(0,s.kt)("inlineCode",{parentName:"p"},"onModelLoaded"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"onSelectionChanged"),",\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"onIsolationChanged")," methods respectively. For now these methods don't do anything - we will override\nthem in other extensions derived from the ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseExtension")," class."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Full list of viewer events can be found at\n",(0,s.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/viewer/v7/reference/Viewing/#events"},"https://forge.autodesk.com/en/docs/viewer/v7/reference/Viewing/#events"),"."))),(0,s.kt)("h2",{id:"metadata-queries"},"Metadata queries"),(0,s.kt)("p",null,"Most of the extensions in this tutorial will need to access the metadata of the currently loaded design,\nfor example, to iterate through the design's logical hierarchy, or to query properties of elements.\nLet's update our ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseExtension")," class with a couple of helper methods for this purpose:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/BaseExtension.js"',title:'"wwwroot/extensions/BaseExtension.js"'},"export class BaseExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._onObjectTreeCreated = (ev) => this.onModelLoaded(ev.model);\n        this._onSelectionChanged = (ev) => this.onSelectionChanged(ev.model, ev.dbIdArray);\n        this._onIsolationChanged = (ev) => this.onIsolationChanged(ev.model, ev.nodeIdArray);\n    }\n\n    load() {\n        this.viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.addEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        return true;\n    }\n\n    unload() {\n        this.viewer.removeEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.removeEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        return true;\n    }\n\n    onModelLoaded(model) {}\n\n    onSelectionChanged(model, dbids) {}\n\n    onIsolationChanged(model, dbids) {}\n\n    // highlight-start\n    findLeafNodes(model) {\n        return new Promise(function (resolve, reject) {\n            model.getObjectTree(function (tree) {\n                let leaves = [];\n                tree.enumNodeChildren(tree.getRootId(), function (dbid) {\n                    if (tree.getChildCount(dbid) === 0) {\n                        leaves.push(dbid);\n                    }\n                }, true);\n                resolve(leaves);\n            }, reject);\n        });\n    }\n    // highlight-end\n\n    // highlight-start\n    async findPropertyNames(model) {\n        const dbids = await this.findLeafNodes(model);\n        return new Promise(function (resolve, reject) {\n            model.getBulkProperties(dbids, {}, function (results) {\n                let propNames = new Set();\n                for (const result of results) {\n                    for (const prop of result.properties) {\n                        propNames.add(prop.displayName);\n                    }\n                }\n                resolve(Array.from(propNames.values()));\n            }, reject);\n        });\n    }\n    // highlight-end\n}\n")),(0,s.kt)("p",null,"Here we're starting to use the ",(0,s.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/viewer/v7/reference/Viewing/Model"},"Model")," class\n(representing the currently loaded design) and some of its methods, for example:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://forge.autodesk.com/en/docs/viewer/v7/reference/Viewing/Model/#getobjecttree-onsuccesscallback-onerrorcallback"},"Model#getObjectTree"),' - used to\nretrieve the object hierarchy (sometimes called an "instance tree") of the model'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://forge.autodesk.com/en/docs/viewer/v7/reference/Viewing/Model/#getbulkproperties-dbids-options-onsuccesscallback-onerrorcallback"},"Model#getBulkProperties")," - used to\nretrieve the metadata for one or more objects"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://forge.autodesk.com/en/docs/viewer/v7/reference/Private/InstanceTree/#getrootid"},"InstanceTree#getRootId")," - returning the ID of the root object"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://forge.autodesk.com/en/docs/viewer/v7/reference/Private/InstanceTree/#enumnodechildren-node-callback-recursive"},"InstanceTree#enumNodeChildren")," - used to\nenumerate (recursively) all children of a specific object")),(0,s.kt)("h2",{id:"simple-extension"},"Simple extension"),(0,s.kt)("p",null,"Alright, now to try this new functionality in the viewer, let's create another extension\nderived from the ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseExtension")," class, and load it in our viewer application. Create a\n",(0,s.kt)("inlineCode",{parentName:"p"},"LoggerExtension.js")," file in the same folder where ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseExtension.js")," is located, and\npopulate it with the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/LoggerExtension.js"',title:'"wwwroot/extensions/LoggerExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\n\nclass LoggerExtension extends BaseExtension {\n    load() {\n        super.load();\n        console.log('LoggerExtension loaded.');\n        return true;\n    }\n\n    unload() {\n        super.unload();\n        console.log('LoggerExtension unloaded.');\n        return true;\n    }\n\n    async onModelLoaded(model) {\n        super.onModelLoaded(model);\n        const props = await this.findPropertyNames(this.viewer.model);\n        console.log('New model has been loaded. Its objects contain the following properties:', props);\n    }\n\n    async onSelectionChanged(model, dbids) {\n        super.onSelectionChanged(model, dbids);\n        console.log('Selection has changed', dbids);\n    }\n\n    onIsolationChanged(model, dbids) {\n        super.onIsolationChanged(model, dbids);\n        console.log('Isolation has changed', dbids);\n    }\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('LoggerExtension', LoggerExtension);\n")),(0,s.kt)("p",null,"The new extension simply overrides methods of the ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseExtension")," class, and outputs some\nuseful information to the browser console in reaction to different viewer events."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Browser console is essential for web development and debugging. Learn more on how to use it for\n",(0,s.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/console/"},"Chrome"),",\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console"},"Edge"),",\n",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console"},"Firefox"),",\nand ",(0,s.kt)("a",{parentName:"p",href:"https://developer.apple.com/safari/tools/"},"Safari"),"."))),(0,s.kt)("p",null,"We also ",(0,s.kt)("strong",{parentName:"p"},"register")," the extension under a specific unique ID so that the viewer can later find it.\nThis is done via a singleton object called ",(0,s.kt)("inlineCode",{parentName:"p"},"Autodesk.Viewing.theExtensionManager")," and its\n",(0,s.kt)("inlineCode",{parentName:"p"},"registerExtension(extensionId, extensionClass)")," method."),(0,s.kt)("p",null,"Now, let's make sure the extension code is loaded by our web application. In our case we can simply\nadd the following ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," statement to the top of the ",(0,s.kt)("inlineCode",{parentName:"p"},"wwwroot/viewer.js")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import './extensions/LoggerExtension.js';\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If you're working with a different application source code, you may need to include the file\nusing a ",(0,s.kt)("inlineCode",{parentName:"p"},"<script>")," tag in your ",(0,s.kt)("inlineCode",{parentName:"p"},"index.html")," page, for example, like so:"),(0,s.kt)("pre",{parentName:"div"},(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<script type="module" src="extensions/LoggerExtension.js"><\/script>\n')))),(0,s.kt)("p",null,"Finally, we need to tell the viewer to load this extension. We can do that by passing the extension\nID in a special config object to the ",(0,s.kt)("inlineCode",{parentName:"p"},"Autodesk.Viewing.GuiViewer3D")," constructor:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n    extensions: [\n        'LoggerExtension'\n    ]\n};\nconst viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n")),(0,s.kt)("h2",{id:"try-it-out"},"Try it out"),(0,s.kt)("p",null,"And with that, our first extension is ready to use. It doesn't have any user interface\nbut we can test it out in the browser console. Start your application as usual, view it\nin the browser, open the browser console, and load one of your designs into the viewer.\nWhen the model finishes loading, our ",(0,s.kt)("inlineCode",{parentName:"p"},"LoggerExtension")," will list all properties used\nin this model to the console. And if we select one or more objects in the viewer,\nthe extension will list their IDs."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Summary Result",src:t(1235).Z,width:"1500",height:"987"})))}u.isMDXComponent=!0},1235:function(e,n,t){n.Z=t.p+"assets/images/summary-result-05e4ef75d4e4fee2abbda347c75ff60a.webp"}}]);